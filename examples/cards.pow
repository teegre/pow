[def init []:
;; deck of cards initialization
[set COLOR ("\u2665" "\u2666" "\u2660" "\u2663")]
[set CARD ("A " "2 " "3 " "4 " "5 " "6 " "7 " "8 " "9 " "10" "J " "Q " "K ")]
[set DECK ()]
[for c 0 3: [for v 0 12: [push DECK [+ (CARD:v) (COLOR:c)]]]]
DECK]

[def compare [c1 c2]:
;; compare two cards
[set VALUES (("A" 13) ("2" 1) ("3" 2) ("4" 3) ("5" 4) ("6" 5) ("7" 6) ("8" 7) ("9" 8) ("1" 9) ("J" 10) ("Q" 11) ("K" 12))]
[set w1 [get-value VALUES (c1:0)]]
[set w2 [get-value VALUES (c2:0)]]
[? [> w1 w2]: c1;
[? [< w1 w2]: c2;
[? [= w1 w2]: 0]]]]

[def get-weight [c]:
;; return weight (value) of a card
[set VALUES (("A" 13) ("2" 1) ("3" 2) ("4" 3) ("5" 4) ("6" 5) ("7" 6) ("8" 7) ("9" 8) ("1" 9) ("J" 10) ("Q" 11) ("K" 12))]
[get-value VALUES c]]

[def play []:
;; play
[set deck [rndl [init]]] #randomized deck of cards
[set hand1 ()] [set hand2 ()]
[for i 0 51 2:
  [push hand1 (deck:i)] 
  [push hand2 (deck:[1+ i])]]
[set score-p1 ()] [set score-p2 ()]
[set temp1 ()] [set temp2 ()]
[set battle-state false]
[set tab [get-attr "off"]]
[hidecursor]
[cls]
[set x 5]
[locate 1 x] [echo "P1  | P2\n"]
[set yy [cury]]
[for i 0 25:
  [? [or battle-state [or [> [len score-p1] 0] [> [len score-p2] 0]]]: [savecursor]]
  [locate yy x] [clrtoeol]
  [echo [len score-p1] [? [< [len score-p1] 10]: "   | "; "  | "] [len score-p2] "\n"]
  [? [or battle-state [or [> [len score-p1] 0] [> [len score-p2] 0]]]: [restorecursor]]
  [set c1 (hand1:i)]
  [set c2 (hand2:i)]
  [locate [cury] x]
  [echo tab c1 [pause 0.125] " | " [pause 0.125] c2 [pause 0.125]]
  [set result [compare c1 c2]]
  [? [= result 0]:
    [set battle-state true]
    [push temp1 c1 c2]
    [push temp2 c1 c2]
    [set y [cury]]
    [locate y x] [echo [get-attr "reverse"] c1 " = " c2] [pause 0.25]
    [locate y x] [clrtoeol] [pause 0.25]
    [locate y x] [echo c1 " = " c2 [get-attr "reverse off"]] [pause 0.25]
    [set tab [get-attr "red"]];
  [? [= result c1]:
    [locate [cury] x]
    [echo tab [get-attr "reverse"] c1 [get-attr "reverse off"] " > " c2]
    [? battle-state:
      [push score-p1 c1 c2]
      [for i 0 [1- [len temp1]]: [push score-p1 (temp1:i)]]
      [set battle-state false]
      [set temp1 ()]
      [set temp2 ()]
      [set tab [get-attr "off"]];
      [push score-p1 c1 c2]];
  [? [= result c2]:
    [locate [cury] x]
    [echo tab c1 " < " [attr "reverse"] c2 [attr "reverse off"]]
    [? battle-state:
      [push score-p2 c1 c2]
      [for i 0 [1- [len temp2]]: [push score-p2 (temp2:i)]]
      [set battle-state false]
      [set temp1 ()]
      [set temp2 ()]
      [set tab [get-attr "off"]];
      [push score-p2 c1 c2]]]]]
  [echo "\n"]]
[attr "off"]
[locate [cury] x]
[echo [* "-" 9] "\n"]
[savecursor]
[locate yy x] [clrtoeol]
[echo [len score-p1] [? [< [len score-p1] 10]: "   | "; "  | "] [len score-p2] "\n"]
[restorecursor]
[pause 1]
[set y [cury]]
[set score1 0]
[for i 0 [1- [len score-p1]]:
  [locate y x] [clrtoeol]
  [echo [set score1 [+ score1 [get-weight ((score-p1:i):0)]]]]
  [pause 0.125]]
[locate y x] [clrtoeol]
[echo score1 [? [< score1 10]: "   | "; [? [< score1 100]: "  | "; " | "]]]
[set xx [curx]]
[set score2 0]
[for i 0 [1- [len score-p2]]:
  [locate y xx] [clrtoeol]
  [echo [set score2 [+ score2 [get-weight ((score-p2:i):0)]]]]
  [pause 0.125]]
[locate y xx] [clrtoeol]
[echo score2]
[pause 0.5]
[locate y x]
[? [> score1 score2]:
  [echo
    [attr "reverse"] score1 [attr "reverse off"]
    [? [< score1 10]: "   > "; [? [< score1 100]: "  > "; " > "]]
    score2];
[? [< score1 score2]:
  [echo
    score1
    [? [< score1 10]: "   < "; [? [< score1 100]: "  < "; " < "]]
    [attr "reverse"] score2 [attr "reverse off"]];
[? [= score1 score2]:
  [echo
    [attr "reverse"] score1
    [? [< score1 10]: "   = "; [? [< score1 100]: "  = "; " = "]]
    score2 [attr "reverse off"]]]]]
[pause 2]]


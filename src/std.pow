;; [PowerText] Standard Library.

[def isnull [a]:
[= a null]]

[def iszero [a]:
[= a 0]]

[def isempty [a]:
[or [= a ""] [= a ()]]]

[def ilen [n]:
;; return number of digits in an integer
;; or return length of element if n is not an integer
[? [and [!= [type n] int] [!= [type n] real]]: [len n];
[set count 0]
[while n:
[set n [// n 10]]
[++ count]]
count]]

[def tolist [S]:
;; convert a string to a list
[set L ()]
[echo S "\n"]
[for i 0 [1- [len S]]:
[push L (S:i)]]
L]

[def ltostr [L]:
;; convert a list to a string
[? L:
[+ [tostr [head L]] [ltostr [tail L]]];
""]]

[def index [L item]:
;; get the index of an item in a list
[set l null]
[? [or [not L] [not item]]: null;
[set idx 0]
[set l L]
[while [!= l null]:
[? [!= [head l] item]:
[++ idx]
[set l [tail l]];
[exit]]]]
[? [isnull l]: null; idx]]

[def fact [n]:
;; factorial
  [def fact-t [n prod]:
  [? [= n 0]: prod;
  [fact-t [- n 1] [* n prod]]]]
[fact-t n 1]]

[def sum [L]:
;; return the sum of elements in a list
[? L:
[+ [head L] [sum [tail L]]];
0]]

[def count [item L]:
;; count occurrences of an item in a list
[? L: [+ [= item [head L]] [count item [tail L]]]; 0]]

[def in [a b]:
;; return true if a is in b, false otherwise
;; b can be a list or a string
[? [= [type b] list]:
[? [not b]: false;
[? [= a [head b]]: true;
[in a [tail b]]]];
[? [= [type b] string]:
[def str-tail [s]: [set T ""] [for i 0 [1- [len s]]: [? i: [set T [+ T (s:i)]]]] T]
[? [not b]: false;
[? [= a (b:0)]: true;
[in a [str-tail b]]]]]]] 

[def abs [x]:
;; absolute value
[? [>= x 0]: x; -x]]

[def inv [x]:
;; inverse of x
[/ 1 x]]

[def range [a b]:
;; return a list of numbers
;; ranging from a to b
[set L ()]
[? [< a b]:
  [while [<= a b]:
  [push L a]
  [++ a]];
[while [>= a b]:
[push L a]
[-- a]]]
L]

[def steprange [a b c]:
;; return a list of numbers
;; ranging from a to b with a step of c
[set L ()]
[? [< a b]:
  [while [<= a b]:
  [push L a]
  [set a [+ a [abs c]]]];
[while [>= a b]:
[push L a]
[set a [- a [abs c]]]]]
L]

[def sort [L]:
;;sort list (in place)
[? [isempty L]: L;
[set m null]
[set q [1- [len L]]]
[for i q 0 -1:
[for ii 0 i:
[? [> (L:ii) (L:[1+ ii])]:
[set m (L:ii)]
[set (L:ii) (L:[1+ ii])]
[set (L:[1+ ii]) m]]]]
L]]

[def rndl [L]:
;; return randomized list
[? L:
[set new ()]
[set index [range 0 [1- [len L]]]]
[while [!= [len new] [len L]]:
[set i [rndr 0 [len index]]]
[push new (L:(index:i))]
[pop index i]]
new;
L]]

[def reverse [L]:
;; reverse order of a list (in place)
[? [not L]: null;
[set i 0]
[set j [1- [len L]]]
[while [< i j]:
[set a (L:i)] [set b (L:j)]
[set (L:j) a] [set (L:i) b]
[++ i] [-- j]]
L]]

[def max [L]:
[? [= [len L] 1]: [head L];
[set m1 [max [tail L]]]
[set m2 [head L]]
[? [> m1 m2]: m1; m2]]]

[def min [L]:
[? [= [len L] 1]: [head L];
[set m1 [min [tail L]]]
[set m2 [head L]]
[? [< m1 m2]: m1; m2]]]

[def get-value [L key]:
;; get the value of a given key
;; ((key1 value1) (key2 value2) ... (keyN valueN)) 
[? [and L [= [type L] list]]:
[? [= key ([head L]:0)]: ([head L]:1); [get-value [tail L] key]];
null]]

[def get-pair [L key]:
[? [and L [= [type L] list]]:
[? [= key ([head L]:0)]: [head L]; [get-pair [tail L] key]];
null]]

[def set-value [L key value]:
[? [= [type L] list]:
[? [set a [get-pair L key]]: [set (a:1) value];
[push L (key value)]]
value;
null]]

[def set-single-value [L index value]:
[? [and L [= [type L] list]]:
[set (L:index) value]
value;
null]]

[def push-value [L key value]:
[? [= [type L] list]:
[? [set a [get-pair L key]]: [push (a:1) value];
[push L (key (value))]]
value;
null]]

[def ucase [S]:
;; convert a lowercase string to uppercase.
[? [and S [= [type S] string]]:
  [set s ""]
  [for i 0 [1- [len S]]:
    [? [or [in [ord (S:i)] [range 97 122]] [or [in [ord (S:i)] [range 224 246]] [in [ord (S:i)] [range 248 252]]]]:
      [set s [+ s [char [- [ord (S:i)] 32]]]];
      [set s [+ s (S:i)]]]]
  s;
  S]]
    
[def lcase [S]:
;; convert an uppercase string to lowercase.
[? [and S [= [type S] string]]:
  [set s ""]
  [for i 0 [1- [len S]]:
    [? [or [in [ord (S:i)] [range 65 90]] [or [in [ord (S:i)] [range 192 214]] [in [ord (S:i)] [range 216 220]]]]:
      [set s [+ s [char [+ [ord (S:i)] 32]]]];
      [set s [+ s (S:i)]]]]
  s;
  S]]

[def rndr [a b]:
;; return an integer between a and b if a < b,
;; between b and a otherwise.
[set lo [? [< a b]: a; b]]
[set hi [? [> a b]: a; b]] 
[// [+ [* [rnd] hi] lo] 1]]

[def base [n b]:
;; convert n into base b
[? [or [< b 2] [> b 36]]: [echo "*** invalid base (2-36)"];
[? [= n 0]: "0";
[set digits (
"0" "1" "2" "3" "4" "5" "6" "7" "8" "9"
"A" "B" "C" "D" "E" "F" "G" "H" "I" "J"
"K" "L" "M" "N" "O" "P" "Q" "R" "S" "T"
"U" "V" "W" "X" "Y" "Z"
)]
[set result ""]
[while [> n 0]:
[set result [+ (digits:[% n b]) result]]
[set n [// n b]]]
result]]]

[def base10 [n b]:
;; convert n from base b to base 10
[? [or [< b 2] [> b 36]]: [echo "*** invalid base (2-36)"];
[set n [tostr n]]
[? [= n "0"]: 0;
[set digits (
"0" "1" "2" "3" "4" "5" "6" "7" "8" "9"
"A" "B" "C" "D" "E" "F" "G" "H" "I" "J"
"K" "L" "M" "N" "O" "P" "Q" "R" "S" "T"
"U" "V" "W" "X" "Y" "Z"
)]
[set result 0]
[for i 0 [1- [len n]]:
[set result [* result b]]
[set result [+ result [index digits (n:i)]]]]
result]]]

[def cls []:
;; clear the screen
[echo "\x1b[2J\x1b[H"]]

[def locate [y x]:
;; move cursor
[echo "\x1b[" y ";" x "H"]]

[def lecho [y x text]:
;; move cursor and print text
[locate y x]
[echo text]]

[def clrtoeol []:
;; clear from current pos. to end of line
[echo "\x1b[K"]]

[def clrtoeos []:
;; clear from current pos. to end of screen
[echo "\x1b[0J"]]

[def clrline []:
;; clear line at current pos.
[echo "\x1b[2K"]]

[def hidecursor []:
;; hide cursor
[echo "\x1b[?25l"]]

[def showcursor []:
;; show cursor
[echo "\x1b[?25h"]]

[def savecursor []:
;; save cursor position
[echo "\x1b[s"]]

[def restorecursor []:
;; restore previously saved cursor position
[echo "\x1b[u"]]

[def scrh []:
;; screen height
[set s [scrsize]]
(s:0)]

[def scrw []:
;; screen width
[set s [scrsize]]
(s:1)]

[def cury []:
;; cursor y position
[set yx [getcur]]
(yx:0)]

[def curx []:
;; cursor x location
[set yx [getcur]]
(yx:1)]

[set _ATTRIBUTES_ (
  ("black"         "\x1b[30m")
  ("red"           "\x1b[31m")
  ("green"         "\x1b[32m")
  ("yellow"        "\x1b[33m")
  ("blue"          "\x1b[34m")
  ("magenta"       "\x1b[35m")
  ("cyan"          "\x1b[36m")
  ("white"         "\x1b[37m")
  ("on black"      "\x1b[40m")
  ("on red"        "\x1b[41m")
  ("on green"      "\x1b[42m")
  ("on yellow"     "\x1b[43m")
  ("on blue"       "\x1b[44m")
  ("on magenta"    "\x1b[45m")
  ("on cyan"       "\x1b[46m")
  ("on white"      "\x1b[47m")
  ("off"           "\x1b[0m")
  ("bold"          "\x1b[1m")
  ("bold off"      "\x1b[22m")
  ("dim"           "\x1b[2m")
  ("dim off"       "\x1b[22m")
  ("italic"        "\x1b[3m")
  ("italic off"    "\x1b[23m")
  ("underline"     "\x1b[4m")
  ("underline off" "\x1b[24m")
  ("blink"         "\x1b[5m")
  ("blink off"     "\x1b[25m")
  ("unknown"       "\x1b[6m")
  ("unknown off"   "\x1b[26m")
  ("reverse"       "\x1b[7m")
  ("reverse off"   "\x1b[27m")
  ("normal"        "\x1b[21m\x1b[22m\x1b[23m\x1b[24m\x1b[25m\x1b[27m")
)]

[def attr [ATTR]:
[echo [get-value _ATTRIBUTES_ ATTR]]]

[def get-attr [ATTR]:
[get-value _ATTRIBUTES_ ATTR]]

[def all-off []:
[attr "off"]
[showcursor]]
